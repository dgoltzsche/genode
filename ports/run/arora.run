#
# Build
#

set build_components {
	core init
	drivers/timer drivers/framebuffer drivers/pci drivers/input drivers/nic
	server/nitpicker
	server/loader server/tar_rom server/nit_fb app/launchpad test/nitpicker
	app/arora
}

#
# Qt5-specific components to build
#
append_if [expr ![have_spec qt4_deprecated]] build_components {
	server/liquid_framebuffer
}

build $build_components

create_boot_directory

#
# Generate tar archives with plugin configurations
#
exec tar cf bin/nitpicker_plugin.tar -C [genode_dir]/ports/src/app/arora/demo/nitpicker_plugin config.plugin

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>}

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="PCI"/></provides>
	</start>}

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="nic_drv">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Nic"/></provides>
	</start>
	<start name="nitpicker">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Nitpicker"/></provides>
	</start>
	<start name="loader">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Loader"/></provides>
	</start>
	<start name="arora">
		<resource name="RAM" quantum="2G"/>
		<config>
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs> <dir name="dev"> <log/> </dir> </vfs>
			</libc>
		</config>
	</start>
</config>}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init
	timer nic_drv
	nitpicker
	loader
	tar_rom
	nit_fb
	launchpad
	testnit
	arora
	ld.lib.so
	libc.lib.so libm.lib.so lwip.lib.so
	zlib.lib.so libpng.lib.so jpeg.lib.so libssl.lib.so libcrypto.lib.so
	freetype.lib.so
	libc_lock_pipe.lib.so
	stdcxx.lib.so
	nitpicker_plugin.tar
}

if {[have_spec qt4_deprecated]} {
	#
	# Qt4-specific boot modules
	#
	append boot_modules {
		dejavusans.lib.so
		qt_core.lib.so
		qt_gui.lib.so
		qt_jscore.lib.so
		qt_network.lib.so
		qt_script.lib.so
		qt_ui_tools.lib.so
		qt_webcore.lib.so
		qt_webkit.lib.so
		qt_xml.lib.so
		qnitpickerviewwidget.lib.so
		qpluginwidget.lib.so
	}
} else {
	#
	# Qt5-specific boot modules
	#
	append boot_modules {
		liquid_fb
		gallium.lib.so
		icu.lib.so
		pthread.lib.so
		qt5_core.lib.so
		qt5_dejavusans.lib.so
		qt5_gui.lib.so
		qt5_jscore.lib.so
		qt5_network.lib.so
		qt5_qnitpickerviewwidget.lib.so
		qt5_qpluginwidget.lib.so
		qt5_ui_tools.lib.so
		qt5_webcore.lib.so
		qt5_webkit.lib.so
		qt5_xml.lib.so	
		qt5_printsupport.lib.so
		qt5_scriptclassic.lib.so
		qt5_sql.lib.so
		qt5_webkitwidgets.lib.so
		qt5_widgets.lib.so
		qt5_wtf.lib.so
	}
}

# platform-specific modules
lappend_if [have_spec       linux] boot_modules fb_sdl
lappend_if [have_spec         pci] boot_modules pci_drv
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [have_spec         ps2] boot_modules ps2_drv

build_boot_image $boot_modules

append qemu_args " -m 512 "

append_if [have_spec x86]     qemu_args " -net nic,model=pcnet "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user "

run_genode_until forever
