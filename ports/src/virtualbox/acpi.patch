+++ src/VBox/Devices/PC/DevACPI.cpp
@@ -438,7 +438,9 @@
     uint32_t            u32GPE0BLK;             /**< port addr of gen-purp event 0 regs block */
     uint32_t            u32GPE1BLK;             /**< port addr of gen-purp event 1 regs block */
     uint8_t             u8PM1EVTLEN;            /**< bytes decoded by PM1a_EVT_BLK. >= 4 */
+#define ACPI_PM1_EVT_LEN 0x4
     uint8_t             u8PM1CTLLEN;            /**< bytes decoded by PM1b_CNT_BLK. >= 2 */
+#define ACPI_PM1_CNT_LEN 0x2
     uint8_t             u8PM2CTLLEN;            /**< bytes decoded by PM2_CNT_BLK. >= 1 or 0 */
     uint8_t             u8PMTMLEN;              /**< bytes decoded by PM_TMR_BLK. ==4 */
     uint8_t             u8GPE0BLKLEN;           /**< bytes decoded by GPE0_BLK. %2==0 */
@@ -1842,10 +1844,10 @@
     } while (0)
 #define L       (GPE0_BLK_LEN / 2)
 
-    R(PM1a_EVT_OFFSET+2, 1, acpiPM1aEnWrite,       acpiPm1aEnRead,      "ACPI PM1a Enable");
-    R(PM1a_EVT_OFFSET,   1, acpiPM1aStsWrite,      acpiPm1aStsRead,     "ACPI PM1a Status");
-    R(PM1a_CTL_OFFSET,   1, acpiPM1aCtlWrite,      acpiPm1aCtlRead,     "ACPI PM1a Control");
-    R(PM_TMR_OFFSET,     1, NULL,                  acpiPMTmrRead,       "ACPI PM Timer");
+    R(PM1a_EVT_OFFSET+2, ACPI_PM1_EVT_LEN / 2, acpiPM1aEnWrite,       acpiPm1aEnRead,      "ACPI PM1a Enable");
+    R(PM1a_EVT_OFFSET, ACPI_PM1_EVT_LEN / 2, acpiPM1aStsWrite,      acpiPm1aStsRead,     "ACPI PM1a Status");
+    R(PM1a_CTL_OFFSET, ACPI_PM1_CNT_LEN, acpiPM1aCtlWrite,      acpiPm1aCtlRead,     "ACPI PM1a Control");
+    R(PM_TMR_OFFSET,     4, NULL,                  acpiPMTmrRead,       "ACPI PM Timer");
     R(GPE0_OFFSET + L,   L, acpiGpe0EnWrite,       acpiGpe0EnRead,      "ACPI GPE0 Enable");
     R(GPE0_OFFSET,       L, acpiGpe0StsWrite,      acpiGpe0StsRead,     "ACPI GPE0 Status");
 #undef L
@@ -2189,8 +2191,8 @@
     fadt.u32PMTMRBLK          = RT_H2LE_U32(acpiCalcPmPort(pThis, PM_TMR_OFFSET));
     fadt.u32GPE0BLK           = RT_H2LE_U32(acpiCalcPmPort(pThis, GPE0_OFFSET));
     fadt.u32GPE1BLK           = RT_H2LE_U32(acpiCalcPmPort(pThis, GPE1_OFFSET));
-    fadt.u8PM1EVTLEN          = 4;
-    fadt.u8PM1CTLLEN          = 2;
+    fadt.u8PM1EVTLEN          = ACPI_PM1_EVT_LEN;
+    fadt.u8PM1CTLLEN          = ACPI_PM1_CNT_LEN;
     fadt.u8PM2CTLLEN          = 0;
     fadt.u8PMTMLEN            = 4;
     fadt.u8GPE0BLKLEN         = GPE0_BLK_LEN;
